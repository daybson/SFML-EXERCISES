//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Mover.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;


public class Mover : Component, IMove
{
    public enum Direction
    {
        Up,
        Down,
        Left,
        Right,
        None
    }

    public delegate void OnDirectionChange(Direction direction);

    private bool moveLeft;
    private bool moveRigth;
    private bool moveUp;
    private bool moveDown;

    public Vector2f Speed;
    protected Vector2f position;
    protected Vector2f move;
    public Vector2f Position { get { return position; } set { } }

    Direction IMove.Direction { get; set; }
    public OnDirectionChange OnChangeDirection { get; set; }

    public Mover()
    {
        this.enabled = true;
        OnChangeDirection += (d) => { };
    }

    public Mover(Vector2f position, Vector2f speed) : base()
    {
        this.enabled = true;
        this.position = position;
        this.Speed = speed;
    }

    public override void Update(float deltaTime)
    {
        this.move = new Vector2f();

        if (this.moveLeft)
            this.move.X = -this.Speed.X * deltaTime;

        if (this.moveRigth)
            this.move.X = this.Speed.X * deltaTime;

        if (this.moveUp)
            this.move.Y = -this.Speed.Y * deltaTime;

        if (this.moveDown)
            this.move.Y = this.Speed.Y * deltaTime;

        this.position += this.move;
    }

    public void SetDirectionMove(Direction direction, bool value)
    {
        switch (direction)
        {
            case Direction.Left: this.moveLeft = value; break;
            case Direction.Right: this.moveRigth = value; break;
            case Direction.Up: this.moveUp = value; break;
            case Direction.Down: this.moveDown = value; break;

            default:
                this.moveLeft = false;
                this.moveRigth = false;
                this.moveUp = false;
                this.moveDown = false;
                break;
        }

        this.OnChangeDirection(direction);
    }

}
