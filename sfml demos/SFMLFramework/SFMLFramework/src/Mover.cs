//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Mover.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;


public class Mover : Component, IMove
{
    public enum Direction
    {
        Up,
        Down,
        Left,
        Right,
        None
    }

    public delegate void OnDirectionChange(Direction direction);

    private bool moveLeft;
    private bool moveRigth;
    private bool moveUp;
    private bool moveDown;

    public Vector2f Speed;
    protected Vector2f move;
    public Vector2f Position { get; set; }

    public Direction direction { get; set; }
    public OnDirectionChange OnChangeDirection { get; set; }

    public Mover()
    {
        this.enabled = true;
    }

    public override void Update(float deltaTime)
    {
        this.move = new Vector2f();

        if (this.moveLeft)
            this.move.X = -this.Speed.X * deltaTime;

        if (this.moveRigth)
            this.move.X = this.Speed.X * deltaTime;

        if (this.moveUp)
            this.move.Y = -this.Speed.Y * deltaTime;

        if (this.moveDown)
            this.move.Y = this.Speed.Y * deltaTime;

        this.Position += this.move;
    }

    public void SetDirectionMove(Direction direction, bool value)
    {
        switch (direction)
        {
            case Direction.Left:
                this.moveLeft = value;
                if (value)
                {
                    this.direction = Direction.Left;
                    this.moveRigth = !value;
                }
                break;
            case Direction.Right:
                this.moveRigth = value;
                if (value)
                {
                    this.direction = Direction.Right;
                    this.moveLeft = !value;
                }
                break;
            case Direction.Up:
                this.moveUp = value;
                if (value)
                {
                    this.direction = Direction.Up;
                    this.moveDown = !value;
                }
                break;
            case Direction.Down:
                this.moveDown = value;
                if (value)
                {
                    this.direction = Direction.Down;
                    this.moveUp = !value;
                }
                break;
            default:
                this.moveLeft = false;
                this.moveRigth = false;
                this.moveUp = false;
                this.moveDown = false;
                break;
        }

        if (value)
            this.OnChangeDirection(direction);
    }
}
