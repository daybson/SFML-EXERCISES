//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Game.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;

public class Game : IUpdate
{
    public Vector2u windowSize;
    public string windowTitle;
    public Clock clock;
    protected RenderWindow window;
    public List<Actor> actors;
    private KeyboardInput keyboard;

    public Game(string title)
    {
        this.windowTitle = title;
        this.actors = new List<Actor>();
        this.windowSize = new Vector2u(800, 600);
        this.clock = new Clock();
        this.keyboard = new KeyboardInput(ref this.window);
    }

    public void Start()
    {
        this.window = new RenderWindow(new VideoMode(this.windowSize.X, this.windowSize.Y), windowTitle);
        this.window.SetFramerateLimit(60);

        this.window.KeyPressed += this.keyboard.ProcessKeyboardPressed;
        this.window.KeyReleased += this.keyboard.ProcessKeyboardReleased;

        var player = new Actor("Player");
        this.actors.Add(player);
        var mover = player.AddComponent<Mover>();
        mover.Speed = new Vector2f(2, 2);

        var inputPlayer = player.AddComponent<PlayerKeyboardController>();
        this.keyboard.OnKeyPressed += inputPlayer.OnKeyPressed;
        this.keyboard.OnKeyReleased += inputPlayer.OnKeyReleased;

        var r = player.AddComponent<Renderer>();
        r.spriteSheet = new SpriteSheet("dragon.png");
        r.spriteSheet.Sprite.Position = mover.Position;

        inputPlayer.keyPressedActions.Add
            (
                Keyboard.Key.A, new Action(() =>
                        {
                            mover.SetMoveDirection(Mover.Direction.Left);
                            r.spriteSheet.Sprite.Position = mover.Position;
                        }
                    )
            );

        inputPlayer.keyPressedActions.Add
            (
                Keyboard.Key.D, new Action(() =>
                {
                    mover.SetMoveDirection(Mover.Direction.Rigth);
                    r.spriteSheet.Sprite.Position = mover.Position;
                }
                    )
            );

        inputPlayer.keyPressedActions.Add
            (
                Keyboard.Key.W, new Action(() =>
                {
                    mover.SetMoveDirection(Mover.Direction.Up);
                    r.spriteSheet.Sprite.Position = mover.Position;
                }
                    )
            );

        inputPlayer.keyPressedActions.Add
            (
                Keyboard.Key.S, new Action(() =>
                {
                    mover.SetMoveDirection(Mover.Direction.Down);
                    r.spriteSheet.Sprite.Position = mover.Position;
                }
                    )
            );

        inputPlayer.keyReleasedActions.Add
            (
                Keyboard.Key.A, new Action(() =>
                {
                    mover.SetMoveDirection(Mover.Direction.None);
                    r.spriteSheet.Sprite.Position = mover.Position;
                }
                    )
            );

        inputPlayer.keyReleasedActions.Add
            (
                Keyboard.Key.D, new Action(() =>
                {
                    mover.SetMoveDirection(Mover.Direction.None);
                    r.spriteSheet.Sprite.Position = mover.Position;
                }
                    )
            );

        inputPlayer.keyReleasedActions.Add
            (
                Keyboard.Key.W, new Action(() =>
                {
                    mover.SetMoveDirection(Mover.Direction.None);
                    r.spriteSheet.Sprite.Position = mover.Position;
                }
                    )
            );

        inputPlayer.keyReleasedActions.Add
            (
                Keyboard.Key.S, new Action(() =>
                {
                    mover.SetMoveDirection(Mover.Direction.None);
                    r.spriteSheet.Sprite.Position = mover.Position;
                }
                    )
            );

        Run();
    }

    protected void Run()
    {
        while(this.window.IsOpen)
        {
            window.DispatchEvents();
            Update(this.clock.ElapsedTime.AsMicroseconds()/10);
            Render();
            this.clock.Restart();
        }
    }

    public void Update(float deltaTime)
    {
        this.actors.ForEach(a => a.Update(deltaTime));
    }

    protected void Render()
    {
        this.window.Clear();

        foreach(var a in actors)
        {
            a.GetComponent<Renderer>().Render(this.window);
        }

        this.window.Display();
    }

    protected void Finish()
    {
    }
}
