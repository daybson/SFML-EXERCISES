//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Game.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;
using System.Threading;

public class Game : IUpdate
{
    public Vector2u windowSize;
    public string windowTitle;
    public Clock clock;
    protected RenderWindow window;
    public List<Actor> actors;
    private KeyboardInput keyboard;
    private Player player;

    public Game(string title)
    {
        this.windowTitle = title;
        this.actors = new List<Actor>();
        this.windowSize = new Vector2u(800, 600);
        this.clock = new Clock();
        this.keyboard = new KeyboardInput(ref this.window);
    }

    public void Start()
    {
        this.window = new RenderWindow(new VideoMode(this.windowSize.X, this.windowSize.Y), windowTitle);
        this.window.SetFramerateLimit(60);
        this.window.KeyPressed += this.keyboard.ProcessKeyboardPressed;
        this.window.KeyReleased += this.keyboard.ProcessKeyboardReleased;

        this.player = new Player();
        this.actors.Add(this.player);

        var rock = new Actor("rock");
        var mRock = rock.AddComponent<Mover>();
        mRock.Position = new Vector2f(400, 320);
        var rRock = rock.AddComponent<Renderer>();
        rRock.iMove = mRock;
        rRock.LoadSpriteSheet("rock.png");
        var cRock = rock.AddComponent<RectCollider>();
        cRock.SetSprite(rRock.SpriteSheet.Sprite);
        cRock.imove = mRock;
        var crRock = rock.AddComponent<CollisionRender>();
        crRock.shape = cRock.GetShape();
        this.actors.Add(rock);

        var floor = new Actor("floor");
        var mFloor = floor.AddComponent<Mover>();        
        mFloor.Position = new Vector2f(0, 350);
        var rFloor = floor.AddComponent<Renderer>();
        rFloor.iMove = mFloor;
        rFloor.LoadSpriteSheet("floor.png");
        var cFloor = floor.AddComponent<RectCollider>();
        cFloor.SetSprite(rFloor.SpriteSheet.Sprite);
        cFloor.imove = mFloor;
        var crFloor = floor.AddComponent<CollisionRender>();
        crFloor.shape = cFloor.GetShape();

        this.keyboard.OnKeyPressed += this.player.keyboardController.OnKeyPressed;
        this.keyboard.OnKeyReleased += this.player.keyboardController.OnKeyReleased;

        this.actors.Add(floor);

        Run();
    }

    protected void Run()
    {
        while (this.window.IsOpen)
        {
            var timer = this.clock.Restart();

            window.DispatchEvents();
            Update(timer.AsSeconds());
            Render();
        }
    }

    public void Update(float deltaTime)
    {
        this.actors.ForEach(a => a.Update(deltaTime));

        foreach (var a in this.actors.Where(a => !a.Equals(this.player)).ToList())
        {
            CollisionInfo hitInfo;
            if (this.player.GetComponent<RectCollider>().CheckCollision(a.GetComponent<RectCollider>(), out hitInfo))
                this.player.GetComponent<RectCollider>().SolveCollision(hitInfo);
        }
    }

    protected void Render()
    {
        this.window.Clear();

        foreach (var a in actors)
        {
            a.GetComponent<Renderer>().Render(this.window);
            a.GetComponent<CollisionRender>().Render(this.window);
        }

        this.window.Display();
    }

    protected void Finish()
    {
    }
}
