//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Game.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;
using System.Threading;

public class Game : IUpdate
{
    #region Fields

    public Vector2u windowSize;
    public string windowTitle;
    public Clock clock;
    protected RenderWindow window;
    private KeyboardInput keyboard;

    private Player player;
    private Entity floor;
    private Entity brick_1;
    private Entity brick_2;
    private Entity brick_3;

    private List<Entity> entities;

    #endregion

    public Game(string title)
    {
        this.windowTitle = title;
        this.windowSize = new Vector2u(800, 600);
        this.clock = new Clock();
        this.keyboard = new KeyboardInput(ref this.window);
        this.entities = new List<Entity>();
    }

    public void Start()
    {
        this.window = new RenderWindow(new VideoMode(this.windowSize.X, this.windowSize.Y), windowTitle);
        this.window.SetFramerateLimit(60);
        this.window.KeyPressed += this.keyboard.ProcessKeyboardPressed;
        this.window.KeyReleased += this.keyboard.ProcessKeyboardReleased;

        this.floor = new Entity("resources/floor.png", ECollisionType.None);
        this.floor.SetPosition(new Vector2f(0, 450));

        this.brick_1 = new Entity("resources/brick.png", ECollisionType.Inelastic);
        this.brick_1.SetPosition(new Vector2f(50, 280));

        this.brick_2 = new Entity("resources/brick2.png", ECollisionType.PartialInelastic);
        this.brick_2.SetPosition(new Vector2f(350, 300));

        this.brick_3 = new Entity("resources/brick3.png", ECollisionType.Elastic);
        this.brick_3.SetPosition(new Vector2f(480, 300));

        this.player = new Player();
        this.keyboard.OnKeyPressed += this.player.keyboardController.OnKeyPressed;
        this.keyboard.OnKeyReleased += this.player.keyboardController.OnKeyReleased;

        this.entities.AddRange(new List<Entity> { this.floor, this.brick_1, this.brick_2, this.brick_3, this.player });

        Run();
    }

    public void Update(float deltaTime)
    {
        this.entities.ForEach(e => e.Update(deltaTime));
        this.player.Update(deltaTime);

        CollisionDispatcher.CollisionCheck(this.player, this.floor);
        CollisionDispatcher.CollisionCheck(this.player, this.brick_1);
        CollisionDispatcher.CollisionCheck(this.player, this.brick_2);
        CollisionDispatcher.CollisionCheck(this.player, this.brick_3);

        CollisionDispatcher.CollisionCheck(this.brick_2, this.floor);
        CollisionDispatcher.CollisionCheck(this.brick_2, this.brick_1);
        CollisionDispatcher.CollisionCheck(this.brick_2, this.brick_3);

        CollisionDispatcher.CollisionCheck(this.brick_3, this.floor);
        CollisionDispatcher.CollisionCheck(this.brick_3, this.brick_1);
        CollisionDispatcher.CollisionCheck(this.brick_3, this.brick_2);
    }


    protected void Run()
    {
        while(this.window.IsOpen)
        {
            var timer = this.clock.Restart();

            window.DispatchEvents();
            Update(timer.AsSeconds());
            Render();
        }
    }

    protected void Render()
    {
        this.window.Clear();

        this.entities.ForEach(e => e.Render(this.window));

        this.window.Display();
    }

}
