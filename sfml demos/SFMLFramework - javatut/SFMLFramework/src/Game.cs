//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Game.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;
using System.Threading;

public class Game : IUpdate
{
    #region Fields

    public Vector2u windowSize;
    public string windowTitle;
    public Clock clock;
    protected RenderWindow window;
    private KeyboardInput keyboard;
    private Player player;
    private Entity floor;
    private Entity brick;

    #endregion


    #region Public

    public Game(string title)
    {
        this.windowTitle = title;
        this.windowSize = new Vector2u(800, 600);
        this.clock = new Clock();
        this.keyboard = new KeyboardInput(ref this.window);
    }

    public void Start()
    {
        this.window = new RenderWindow(new VideoMode(this.windowSize.X, this.windowSize.Y), windowTitle);
        this.window.SetFramerateLimit(60);
        this.window.KeyPressed += this.keyboard.ProcessKeyboardPressed;
        this.window.KeyReleased += this.keyboard.ProcessKeyboardReleased;

        this.floor = new Entity("floor.png");
        this.floor.SetPosition(new Vector2f(0, 450));

        this.brick = new Entity("brick.png");
        this.brick.SetPosition(new Vector2f(250, 280));

        this.player = new Player();
        this.keyboard.OnKeyPressed += this.player.keyboardController.OnKeyPressed;
        this.keyboard.OnKeyReleased += this.player.keyboardController.OnKeyReleased;

        Run();
    }

    public void Update(float deltaTime)
    {
        this.player.Update(deltaTime);
        this.floor.Update(deltaTime);

        this.player.IsColliding(this.floor);
        this.player.IsColliding(this.brick);
    }

    #endregion


    #region Protected

    protected void Run()
    {
        while (this.window.IsOpen)
        {
            var timer = this.clock.Restart();

            window.DispatchEvents();
            Update(timer.AsSeconds());
            Render();
        }
    }

    protected void Render()
    {
        this.window.Clear();

        this.player.Render(this.window);
        this.floor.Render(this.window);
        this.brick.Render(this.window);

        this.window.Display();
    }

    protected void Finish()
    {
    }

    #endregion
}
