//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Game.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;
using System.Threading;
using SFMLFramework;
using SFMLFramework.src.Helper;

public class Game
{
    public Vector2u windowSize;
    public string windowTitle;
    public Clock clock;
    protected RenderWindow window;
    private KeyboardInput keyboard;

    private Player player;
    private GameObject platform;
    private GameObject inelasticBrick1;
    private GameObject inelasticBrick2;
    private GameObject elasticBrick;
    private GameObject partialInelasticBrick;

    private List<GameObject> gameObjects;
    private VisualDebugger debugger;

    public Game(string title)
    {
        this.windowTitle = title;
        this.windowSize = new Vector2u(800, 600);
        this.clock = new Clock();
        this.keyboard = new KeyboardInput(ref this.window);

        this.gameObjects = new List<GameObject>();
        this.player = new Player();
        this.platform = new GameObject();
        this.inelasticBrick1 = new GameObject();
        this.inelasticBrick2 = new GameObject();
        this.debugger = new VisualDebugger();
    }

    public void Start()
    {
        this.debugger.SetMessage("Teste");

        this.window = new RenderWindow(new VideoMode(this.windowSize.X, this.windowSize.Y), windowTitle);
        this.window.SetFramerateLimit(60);
        this.window.KeyPressed += this.keyboard.ProcessKeyboardPressed;
        this.window.KeyReleased += this.keyboard.ProcessKeyboardReleased;
        this.player.SetKeyboardInput(ref this.keyboard);
        this.player.Position = new Vector2f(300, 50);

        var platformRenderer = new Renderer(Resources.LoadSpriteSheet("platform.png"), this.platform);
        this.platform.Components.Add(platformRenderer);
        this.platform.Subscribe(platformRenderer);
        this.platform.Components.Add(
            new Rigidbody(
                0,
                0,
                new Vector2f(platformRenderer.SpriteSheet.TileWidth, platformRenderer.SpriteSheet.TileHeight),
                new Material("Platform", 1, 1, 1, ECollisionType.Inelastic),
                true,
                this.platform));
        this.platform.Position = new Vector2f(0, 230);

        var brickRenderer1 = new Renderer(Resources.LoadSpriteSheet("brick.png"), this.inelasticBrick1);
        this.inelasticBrick1.Components.Add(brickRenderer1);
        this.inelasticBrick1.Subscribe(brickRenderer1);
        this.inelasticBrick1.Components.Add(
            new Rigidbody(
                9,
                0,
                new Vector2f(brickRenderer1.SpriteSheet.TileWidth, brickRenderer1.SpriteSheet.TileHeight),
                new Material("Brick 1", 8, 1, 1, ECollisionType.Inelastic),
                true,
                this.inelasticBrick1));
        this.inelasticBrick1.Position = new Vector2f(120, 185);

        var brickRenderer2 = new Renderer(Resources.LoadSpriteSheet("brick.png"), this.inelasticBrick1);
        this.inelasticBrick2.Components.Add(brickRenderer2);
        this.inelasticBrick2.Subscribe(brickRenderer2);
        this.inelasticBrick2.Components.Add(
            new Rigidbody(
                3,
                0.5f,
                new Vector2f(brickRenderer2.SpriteSheet.TileWidth, brickRenderer2.SpriteSheet.TileHeight),
                new Material("Brick 2", 8, 1, 1, ECollisionType.PartialInelastic),
                false,
                this.inelasticBrick2));
        this.inelasticBrick2.Position = new Vector2f(220, 160);

        this.gameObjects.Add(this.player);
        this.gameObjects.Add(this.platform);
        this.gameObjects.Add(this.inelasticBrick1);
        this.gameObjects.Add(this.inelasticBrick2);

        Run();
    }

    public void Update(float deltaTime)
    {
        foreach (var g in this.gameObjects)
        {
            g.Update(deltaTime);
        }

        CollisionDispatcher.CollisionCheck(this.inelasticBrick1.GetComponent<Rigidbody>(), this.platform.GetComponent<Rigidbody>());
        CollisionDispatcher.CollisionCheck(this.inelasticBrick1.GetComponent<Rigidbody>(), this.inelasticBrick2.GetComponent<Rigidbody>());
        CollisionDispatcher.CollisionCheck(this.inelasticBrick2.GetComponent<Rigidbody>(), this.platform.GetComponent<Rigidbody>());
        CollisionDispatcher.CollisionCheck(this.player.GetComponent<Rigidbody>(), this.platform.GetComponent<Rigidbody>());
        CollisionDispatcher.CollisionCheck(this.player.GetComponent<Rigidbody>(), this.inelasticBrick1.GetComponent<Rigidbody>());
        CollisionDispatcher.CollisionCheck(this.player.GetComponent<Rigidbody>(), this.inelasticBrick2.GetComponent<Rigidbody>());
    }

    protected void Run()
    {
        while (this.window.IsOpen)
        {
            var timer = this.clock.Restart();

            window.DispatchEvents();
            Update(timer.AsSeconds());
            Render();
        }
    }

    protected void Render()
    {
        this.window.Clear(Color.White);

        this.gameObjects?.ForEach(g => g?.GetComponent<Renderer>()?.Render(ref this.window));

        this.debugger.Render(ref this.window);

        this.window.Display();
    }
}
