//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Game.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SFML.System;
using System.Threading;
using SFMLFramework;
using SFMLFramework.src.Helper;

public class Game
{
    public Vector2u windowSize;
    public string windowTitle;
    public Clock clock;
    protected RenderWindow window;
    private KeyboardInput keyboard;
    private Player player;
    private GameObject platform;
    private List<GameObject> gameObjects;

    public Game(string title)
    {
        this.windowTitle = title;
        this.windowSize = new Vector2u(800, 600);
        this.clock = new Clock();
        this.keyboard = new KeyboardInput(ref this.window);

        this.gameObjects = new List<GameObject>();
        this.player = new Player();
        this.platform = new GameObject();
    }

    public void Start()
    {
        this.window = new RenderWindow(new VideoMode(this.windowSize.X, this.windowSize.Y), windowTitle);
        this.window.SetFramerateLimit(60);
        this.window.KeyPressed += this.keyboard.ProcessKeyboardPressed;
        this.window.KeyReleased += this.keyboard.ProcessKeyboardReleased;
        this.player.SetKeyboardInput(ref this.keyboard);

        var platformRenderer = new Renderer(Resources.Load("resources/brick.png"));
        this.platform.Components.Add(platformRenderer);
        this.platform.Subscribe(platformRenderer);

        this.platform.Components.Add(
            new Rigidbody(
                V2.Zero,
                V2.Zero,
                0,
                V2.Zero,
                new Vector2f(this.platform.GetComponent<Renderer>().SpriteSheet.TileWidth, this.platform.GetComponent<Renderer>().SpriteSheet.TileHeight),
                new Material("Plataforma", 1, 1, 1, ECollisionType.Inelastic),
                true,
                this.platform));

        this.platform.Position = new Vector2f(20, 200);

        this.gameObjects.Add(this.player);
        this.gameObjects.Add(this.platform);

        Run();
    }

    public void Update(float deltaTime)
    {
        foreach (var g in this.gameObjects)
        {
            g?.Update(deltaTime);
        }

        CollisionDispatcher.CollisionCheck(this.player.GetComponent<Rigidbody>(), this.platform.GetComponent<Rigidbody>());

    }

    protected void Run()
    {
        while (this.window.IsOpen)
        {
            var timer = this.clock.Restart();

            window.DispatchEvents();
            Update(timer.AsSeconds());
            Render();
        }
    }

    protected void Render()
    {
        this.window.Clear(Color.White);

        this.gameObjects?.ForEach(g => ((Renderer)g?.GetComponent<Renderer>())?.Render(ref this.window));

        this.player.Rigidbody.ColliderTop.Render(ref this.window);
        this.player.Rigidbody.ColliderBottom.Render(ref this.window);
        this.player.Rigidbody.ColliderRight.Render(ref this.window);
        this.player.Rigidbody.ColliderLeft.Render(ref this.window);

        this.platform.GetComponent<Rigidbody>().ColliderTop.Render(ref this.window);
        this.platform.GetComponent<Rigidbody>().ColliderBottom.Render(ref this.window);
        this.platform.GetComponent<Rigidbody>().ColliderRight.Render(ref this.window);
        this.platform.GetComponent<Rigidbody>().ColliderLeft.Render(ref this.window);

        this.window.Display();
    }
}
