//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : SFML Framework
//  @ File Name : Game.cs
//  @ Date : 13/09/2016
//  @ Author : Daybson B. S. Paisante <daybson.paisante@outlook.com>
//
//

using SFML.Graphics;
using SFML.Window;
using System;
using System.Collections.Generic;

using System.Linq;
using System.Text;
using SFML.System;
using System.Threading;
using SFMLFramework;
using SFMLFramework.src.Helper;

public class Game
{
    #region Fields

    public static readonly Vector2u windowSize = new Vector2u(800, 600);
    public string windowTitle;
    public Clock clock;
    protected RenderWindow window;
    private KeyboardInput keyboard;

    private Player player;
    public Player Player { get { return player; } }

    private GameObject platformTop;
    private GameObject platformBottom;
    private GameObject platformRight;
    private GameObject platformLeft;

    private List<GameObject> gameObjects;
    public List<GameObject> GameObjects { get { return gameObjects; } }

    private VisualDebugger debugger;

    #endregion


    #region Public

    public Game(string title)
    {
        this.windowTitle = title;
        this.clock = new Clock();
        this.keyboard = new KeyboardInput(ref this.window);
        this.gameObjects = new List<GameObject>();
        this.debugger = new VisualDebugger();
    }

    public void Start()
    {
        this.debugger.SetMessage("Teste");

        this.window = new RenderWindow(new VideoMode(windowSize.X, windowSize.Y), windowTitle);
        this.window.SetFramerateLimit(60);
        this.window.KeyPressed += this.keyboard.ProcessKeyboardPressed;
        this.window.KeyReleased += this.keyboard.ProcessKeyboardReleased;

        this.platformBottom = GameObjectCreator.CreateBottomPlatform();
        this.platformTop = GameObjectCreator.CreateTopPlatform();
        this.platformRight = GameObjectCreator.CreateRightPlatform();
        this.platformLeft = GameObjectCreator.CreateLeftPlatform();

        //this.player = GameObjectCreator.CreatePlayer(ref this.keyboard);
        //this.gameObjects.Add(this.player);

        this.gameObjects.Add(this.platformTop);
        this.gameObjects.Add(this.platformBottom);
        this.gameObjects.Add(this.platformRight);
        this.gameObjects.Add(this.platformLeft);

        this.gameObjects.Add(this.platformTop);
        this.gameObjects.Add(GameObjectCreator.CreateInelasticBrick(new Vector2f(150, 350)));
        this.gameObjects.Add(GameObjectCreator.CreateInelasticBrick(new Vector2f(400, 450)));

        this.gameObjects.Find(g => g.name == "InelasticBrick").GetComponent<Rigidbody>().AddForce(new Vector2f(-50f, 0f));

        Run();
    }

    public void Update(float deltaTime)
    {
        foreach (var g in this.gameObjects)
        {
            g.Update(deltaTime);

            //Loop de colisão
            for (var i = 0; i < this.gameObjects.Count; i++)
            {
                //evita teste com si mesmo
                if (g != this.gameObjects[i])
                {
                    var gRigidBody = g.GetComponent<Rigidbody>();
                    var gIndexRigidBody = gameObjects[i].GetComponent<Rigidbody>();

                    if (gRigidBody != null && gIndexRigidBody != null)
                        CollisionDispatcher.CollisionCheck(gRigidBody, gIndexRigidBody, deltaTime);
                }
            }
        }
    }

    #endregion


    #region Protected

    protected void Run()
    {
        while (this.window.IsOpen)
        {
            var timer = this.clock.Restart();

            window.DispatchEvents();
            Update(timer.AsSeconds());
            Render();
        }
    }

    protected void Render()
    {
        this.window.Clear(Color.White);

        foreach (var g in this.gameObjects)
        {
            g.GetComponent<Renderer>()?.Render(ref this.window);
            g.GetComponent<Rigidbody>()?.ColliderBottom.Render(ref this.window);
            g.GetComponent<Rigidbody>()?.ColliderTop.Render(ref this.window);
            g.GetComponent<Rigidbody>()?.ColliderRight.Render(ref this.window);
            g.GetComponent<Rigidbody>()?.ColliderLeft.Render(ref this.window);
        }

        this.debugger.Render(ref this.window);

        this.window.Display();
    }

    #endregion

}
